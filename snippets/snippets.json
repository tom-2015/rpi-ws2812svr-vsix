{
	"setup": {
		"prefix": "setup",
		"body": "setup channel, led_count, led_type, ...",
		"description": "setup configures a LED channel.",
		"reference": "",
		"signatures": [ {"label" : "setup channel, led_count, led_type, invert, global_brightness, gpionum" , 
						"documentation":"Setup (re)configures a LED channel for WS2812 or SK6812 (PWM or PCM), must be executed before init command.", 
						"parameters": [{"label": "channel", "documentation": "Channel number, must be incremented for each call to setup starting at 1."},
									   {"label": "led_count", "documentation": "Number of leds in the string."},
									   {"label": "led_type", "documentation": "Determines type of led attached."},
									   {"label": "invert", "documentation": "Set to 1 if output signal must be inverted."},
									   {"label": "global_brightness", "documentation": "Sets the global channel brightness level value: 0-255, default 255."},
									   {"label": "gpionum", "documentation": "GPIO number to output PWM or PCM, [https://github.com/jgarff/rpi_ws281x#gpio-usage](more info)."}] },
						{"label" : "setup channel, led_count, led_type, invert, global_brightness, SPI_DEV, SPI_SPEED, ALT_SPI_PIN" , 
						"documentation":"Setup (re)configures a LED channel for SK9822 chips (SPI), must be executed before init command.", 
						"parameters": [{"label": "channel", "documentation": "Channel number, must be incremented for each call to setup starting at 1."},
										{"label": "led_count", "documentation": "Number of leds in the string."},
										{"label": "led_type", "documentation": "Determines type of led attached."},
										{"label": "invert", "documentation": "Set to 1 if output signal must be inverted, note: SPI clock cannot be inverted."},
										{"label": "global_brightness", "documentation": "Sets the global channel brightness level value: 0-255, default 255."},
										{"label": "SPI_DEV", "documentation": "Link to the SPI device to use, default /dev/spidev0.0."},
										{"label": "SPI_SPEED", "documentation": "SPI speed to use, default 20MHz."},
										{"label": "ALT_SPI_PIN", "documentation": "Use alternative SPI MOSI output pin, default pin 10, can change to 38."}] },
						{"label" : "setup channel, led_count, led_type, parent_channel_index, offset" , 
							"documentation":"Setup (re)configures a virtual LED channel as part of a physical channel.", 
							"parameters": [{"label": "channel", "documentation": "Channel number, must be incremented for each call to setup starting at 1."},
											{"label": "led_count", "documentation": "Number of leds in the string."},
											{"label": "led_type", "documentation": "99, for virtual channel."},
											{"label": "parent_channel_index", "documentation": "Parent channel index (must be a channel number from a previous call to setup)."},
											{"label": "offset", "documentation": "Virtual channel starts at this LED index in the parent channel."}] }
									]
		
	},
	"init": {
		"prefix": "init",
		"body": "init frequency, dma",
		"description": "Initializes the hardware, execute after all setup commands.",
		"reference": "",
		"signatures": [{"label" : "init frequency, dma" , 
						"documentation":"Initializes the hardware, execute after all setup commands.", 
						"parameters": [{"label": "frequency", "documentation": "LED chip frequency, default 800000"},
									   {"label": "dma", "documentation": "DMA channel to use, default 10. Changing can corrupt your SD card!"}] }]
	},
	"render": {
		"prefix": "render",
		"body": "render channel, start, colors",
		"description": "Renders all colors to the LEDs.",
		"reference": "",
		"signatures": [{"label" : "render channel, start, colors" , 
						"documentation":"Renders all colors to the LEDs.", 
						"parameters": [{"label": "channel", "documentation": "Channel number to render."},
									   {"label": "start", "documentation": "Before render change color of LEDs, starting at this position (default 0). Colors are given in next argument."},
									   {"label": "colors", "documentation": "RRGGBBRRGGBBRRGGBBRRGGBB... color values of LEDs to change before render, starting at start index."}] }]
	},
	"rotate": {
		"prefix": "rotate",
		"body": "rotate channel, places, direction, color",
		"description": "Moves all color values by specified ammount of positions to the left or right.",
		"reference": "",
		"signatures": [{"label" : "rotate channel, places, direction, color" , 
						"documentation":"Moves all color values by specified ammount of positions to the left or right.", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "places", "documentation": "Number of positions to move."},
									   {"label": "direction", "documentation": "Direction to move (1 or 0) default 0."},
									   {"label": "color", "documentation": "RRGGBB color the first or last LEDs must get, if argument is empty a circular rotate is performed where the first LED will get the color of the last LED."}] }]
	},
	"rainbow": {
		"prefix": "rainbow",
		"body": "rainbow channel, start_color, end_color, start, len",
		"description": "Fills the LED string with a rainbow of colors.",
		"reference": "",
		"signatures": [{"label" : "rainbow channel, start_color, end_color, start, len" , 
						"documentation":"Fills the LED string with a rainbow of colors.", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "start_color", "documentation": "Start at this color, values 0-255, 0 is red and 255 is pink (default 0)."},
									   {"label": "end_color", "documentation": "Color to end with, values 0-255, 0 is red and 255 is pink (default 255)."},
									   {"label": "start", "documentation": "Start at this LED position in the string (default 0)."},
									   {"label": "len", "documentation": "Number of LEDs to affect, starting at start (default entire strip)."}] }]
	},
	"fill": {
		"prefix": "fill",
		"body": "fill channel, color, start, len",
		"description": "Fills the LED string with given color.",
		"reference": "",
		"signatures": [{"label" : "fill channel, color, start, len" , 
						"documentation":"Fills the LED string with a rainbow of colors.", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "color", "documentation": "RRGGBB values of color to fill the string."},
									   {"label": "start", "documentation": "Start at this LED position (default 0)."},
									   {"label": "len", "documentation": "Fill this number of LEDs starting at start with given color (default entire strip)."},
									   {"label": "operator", "documentation": "Use this bitwise operator to fill <OR,AND,XOR,NOT>. Default is overwrite old color."}] }]
	},
	"delay": {
		"prefix": "delay",
		"body": "delay milliseconds",
		"description": "Waits for at least the given number of milliseconds.",
		"reference": "",
		"signatures": [{"label" : "delay milliseconds" , 
						"documentation":"Waits for at least the given number of milliseconds.", 
						"parameters": [{"label": "milliseconds", "documentation": "Number of milliseconds to wait."}] }]
	},
	"brightness": {
		"prefix": "brightness",
		"body": "brightness channel, brightness, start, len",
		"description": "Changes the brightness of given LEDs whithout changing color.",
		"reference": "",
		"signatures": [{"label" : "brightness channel, brightness, start, len" , 
						"documentation":"Changes the brightness of given LEDs whithout changing color.", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "brightness", "documentation": "Change brightness to this level 0-255."},
									   {"label": "start", "documentation": "Start at this LED position (default 0)."},
									   {"label": "len", "documentation": "Number of LEDs to change (default entire strip)."}
							] }]
	},
	"fade": {
		"prefix": "fade",
		"body": "fade channel, start_brightness, end_brightness, delay, step, start, len",
		"description": "Changes the brightness LEDs between 2 values with a delay without changing color.",
		"reference": "",
		"signatures": [{"label" : "fade channel, start_brightness, end_brightness, delay, step, start, len" , 
						"documentation":"Changes the brightness LEDs between 2 values with a delay without changing color.", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "start_brightness", "documentation": "Start at this brightness level 0-255."},
									   {"label": "end_brightness", "documentation": "End at this brightness level 0-255."},
									   {"label": "delay", "documentation": "Delay in ms."},
									   {"label": "step", "documentation": "Step to increate / decrease brightness for every delay until end_brightness is reached."},
									   {"label": "start", "documentation": "Start at this LED position (default 0)."},
									   {"label": "len", "documentation": "Number of LEDs to change (default entire strip)."}
							] }]
	},
	"gradient": {
		"prefix": "gradient",
		"body": "gradient channel, component, start_level, end_level, start, len",
		"description": "Makes a smooth change of color or brightness level between LED postion start and start+len.",
		"reference": "",
		"signatures": [{"label" : "gradient channel, component, start_level, end_level, start, len" , 
						"documentation":"Makes a smooth change of color or brightness level between LED postion start and start+len.", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "component", "documentation": "Determines which color component to change: R=red, G=green, B=blue, W=White, L=brightness."},
									   {"label": "start_level", "documentation": "Start at this brightness or color level 0-255, default 0."},
									   {"label": "end_level", "documentation": "End at this brightness or color level 0-255, default 255."},
									   {"label": "start", "documentation": "Start at this LED position (default 0)."},
									   {"label": "len", "documentation": "Number of LEDs to change (default entire strip)."}
							] }]
	},
	"random": {
		"prefix": "random",
		"body": "random channel, start, len, component",
		"description": "Generates a random color value.",
		"reference": "",
		"signatures": [{"label" : "random channel, start, len, component" , 
						"documentation":"Generates a random color value.", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "start", "documentation": "Start at this LED position (default 0)."},
									   {"label": "len", "documentation": "Number of LEDs to change (default entire strip)."},
									   {"label": "component", "documentation": "Determines which color component to change: R=red, G=green, B=blue, W=White, L=brightness. Combinations like RW = only Red and Blue random component are possible."}
							] }]
	},
	"readjpg": {
		"prefix": "readjpg",
		"body": "readjpg channel, file, start, len, offset, operator, delay, flip_rows",
		"description": "Read pixels from a JPG file and fill them in the LED string.",
		"reference": "",
		"signatures": [{"label" : "readjpg channel, file, start, len, offset, operator, delay, flip_rows" , 
						"documentation":"Read pixels from a JPG file and fill them in the LED string.", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "file", "documentation": "File location of the JPG."},
									   {"label": "start", "documentation": "Start at this LED position (default 0)."},
									   {"label": "len", "documentation": "Number of LEDs to change (default entire strip)."},
									   {"label": "offset", "documentation": "Start at pixel offset in the JPG file (default 0)."},
									   {"label": "operator", "documentation": "Determines binary operator to use to combine current LED color and JPG pixel color. OR,AND,XOR,NOT,= default is to copy JPG pixel color in the LED (=)."},
									   {"label": "delay", "documentation": "Optional a delay if JPG has multiple pixel rows each row can be rendered into the LED strip with this delay (ms), default is 0 only first row is rendered."},
									   {"label": "flip_rows", "documentation": "if 1 horizontal rows with odd index in the JPG will be rendered in reverse (can be used for 2D panels)."}
							] }]
	},
	"readpng": {
		"prefix": "readpng",
		"body": "readpng channel, file, backcolor, start, len, offset, operator, delay, flip_rows",
		"description": "Read pixels from a JPG file and fill them in the LED string.",
		"reference": "",
		"signatures": [{"label" : "readpng channel, file, backcolor, start, len, offset, operator, delay, flip_rows" , 
						"documentation":"Read pixels from a PNG file and fill them in the LED string.", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "file", "documentation": "File location of the PNG."},
									   {"label": "backcolor", "documentation": "Color RRGGBB to use for background in case of transparent pixel. Default is the background color defined in the PNG. W can be used for SK6812 in this case the alpha component of the PNG will be rendered in the white LEDs."},
									   {"label": "start", "documentation": "Start at this LED position (default 0)."},
									   {"label": "len", "documentation": "Number of LEDs to change (default entire strip)."},
									   {"label": "offset", "documentation": "Start at pixel offset in the PNG file (default 0)."},
									   {"label": "operator", "documentation": "Determines binary operator to use to combine current LED color and PNG pixel color. OR,AND,XOR,NOT,= default is to copy PNG pixel color in the LED (=)."},
									   {"label": "delay", "documentation": "Optional a delay if PNG has multiple pixel rows each row can be rendered into the LED strip with this delay (ms), default is 0 only first row is rendered."},
									   {"label": "flip_rows", "documentation": "if 1 horizontal rows with odd index in the PNG will be rendered in reverse (can be used for 2D panels)."}
							] }]
	},
	"blink": {
		"prefix": "readpng",
		"body": "readpng channel, file, backcolor, start, len, offset, operator, delay, flip_rows",
		"description": "Read pixels from a JPG file and fill them in the LED string.",
		"reference": "",
		"signatures": [{"label" : "readpng channel, file, backcolor, start, len, offset, operator, delay, flip_rows" , 
						"documentation":"Read pixels from a PNG file and fill them in the LED string.", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "file", "documentation": "File location of the PNG."},
									   {"label": "backcolor", "documentation": "Color RRGGBB to use for background in case of transparent pixel. Default is the background color defined in the PNG. W can be used for SK6812 in this case the alpha component of the PNG will be rendered in the white LEDs."},
									   {"label": "start", "documentation": "Start at this LED position (default 0)."},
									   {"label": "len", "documentation": "Number of LEDs to change (default entire strip)."},
									   {"label": "offset", "documentation": "Start at pixel offset in the PNG file (default 0)."},
									   {"label": "operator", "documentation": "Determines binary operator to use to combine current LED color and PNG pixel color. OR,AND,XOR,NOT,= default is to copy PNG pixel color in the LED (=)."},
									   {"label": "delay", "documentation": "Optional a delay if PNG has multiple pixel rows each row can be rendered into the LED strip with this delay (ms), default is 0 only first row is rendered."},
									   {"label": "flip_rows", "documentation": "if 1 horizontal rows with odd index in the PNG will be rendered in reverse (can be used for 2D panels)."}
							] }]
	},
	"random_fade_in_out": {
		"prefix": "random_fade_in_out",
		"body": "random_fade_in_out channel, duration, count, delay, step, inc_dec, brightness, start, len, color",
		"description": "Creates random blinking/fading effect, use for snow effect.",
		"reference": "",
		"signatures": [{"label" : "random_fade_in_out channel, duration, count, delay, step, inc_dec, brightness, start, len, color" , 
						"documentation":"Creates random blinking/fading effect, use for snow effect.", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "duration", "documentation": "Duration of the effect in seconds, 0 to keep going forever."},
									   {"label": "count", "documentation": "Max number of LEDs that will fade in or out at same time."},
									   {"label": "delay", "documentation": "Delay between changes in brightness."},
									   {"label": "step", "documentation": "Number of LEDs to change (default entire strip)."},
									   {"label": "inc_dec", "documentation": "Inc_dec = if 1 brightness will start at parameter <brightness> and decrease to initial brightness of the LED, else it will start low and go up."},
									   {"label": "brightness", "documentation": "Brightness to start or end for fading LEDs."},
									   {"label": "start", "documentation": "Start position in the string."},
									   {"label": "len", "documentation": "Number of LEDs."},
									   {"label": "color", "documentation": "Color to use for blinking LEDs."}
							] }]
	},
	"color_change": {
		"prefix": "color_change",
		"body": "color_change channel, start_color, stop_color, duration, start, len",
		"description": "Changes LEDs from one color to another in specified time.",
		"reference": "",
		"signatures": [{"label" : "color_change channel, start_color, stop_color, duration, start, len" , 
						"documentation":"Changes LEDs from one color to another in specified time.", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "start_color", "documentation": "Color to start with, value 0-255 where 0 is red and 255 pink (default is 0)."},
									   {"label": "stop_color", "documentation": "Color to end with, value 0-255 where 0 is red and 255 pink (default is 255)."},
									   {"label": "duration", "documentation": "Total number of ms the event should take, default is 10000 or 10 seconds."},
									   {"label": "start", "documentation": "Start effect at this led position."},
									   {"label": "len", "documentation": "Number of leds to change starting at start."}
							] }]
	},
	"chaser": {
		"prefix": "chaser",
		"body": "chaser channel, duration, color, count, direction, delay, start, len, brightness, loops",
		"description": "Creates a chaser light.",
		"reference": "",
		"signatures": [{"label" : "chaser channel, duration, color, count, direction, delay, start, len, brightness, loops" , 
						"documentation":"Creates a chaser light.", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "duration", "documentation": "Number of seconds before ending the command, default is 10, use 0 to make chaser run forever."},
									   {"label": "color", "documentation": "Color RRGGBB to use for chasing LEDs."},
									   {"label": "count", "documentation": "Number of LEDs in the chaser that will light up."},
									   {"label": "direction", "documentation": "Forward/backward direction of the chaser, 1 or 0."},
									   {"label": "delay", "documentation": "Delay between moving one pixel, in milliseconds, default is 10ms."},
									   {"label": "start", "documentation": "Start effect at this led position."},
									   {"label": "len", "documentation": "Number of leds to change starting at start."},
									   {"label": "brightness", "documentation": "Brightness value of LEDs (0-255) default is 255."},
									   {"label": "loops", "documentation": "Max number of loops instead of duration, use 0 to loop forever or 0 to use the duration argument."}
							] }]
	},
	"fly_in": {
		"prefix": "fly_in",
		"body": "fly_in channel, direction, delay, brightness, start, len, start_brightness, color",
		"description": "Fill entire string with brightness value, LEDs fly in from the right/left until all LEDs have same brightness.",
		"reference": "",
		"signatures": [{"label" : "fly_in channel, duration, delay, brightness, start, len, start_brightness, color" , 
						"documentation":"Fill entire string with brightness value, LEDs fly in from the right/left until all LEDs have same brightness.", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "direction", "documentation": "Direction where to start with fly in effect (default 1)."},
									   {"label": "delay", "documentation": "Delay between moving pixels in ms (default 10ms)."},
									   {"label": "brightness", "documentation": "Final brightness of all LEDs, (0-255, default 255)."},
									   {"label": "start", "documentation": "Start effect at this LED position."},
									   {"label": "len", "documentation": "Number of LEDs to change starting at start."},
									   {"label": "start_brightness", "documentation": "At beginning give all LEDs this brightness value."},
									   {"label": "color", "documentation": "Color all LEDs must have at the end when entire string is filled, default is to use the current color stored in the memory."}
							] }]
	},
	"fly_out": {
		"prefix": "fly_out",
		"body": "fly_out channel, direction, delay, brightness, start, len, end_brightness, color",
		"description": "Fill entire string with brightness value, LEDs fly out to the right/left until all LEDs have same brightness.",
		"reference": "",
		"signatures": [{"label" : "fly_out channel, duration, delay, brightness, start, len, start_brightness, color" , 
						"documentation":"Fill entire string with brightness value, LEDs fly out to the right/left until all LEDs have same brightness.", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "direction", "documentation": "Direction where to start with fly out effect (default 1)."},
									   {"label": "delay", "documentation": "Delay between moving pixels in ms (default 10ms)."},
									   {"label": "brightness", "documentation": "Final brightness of all LEDs, (0-255, default 255)."},
									   {"label": "start", "documentation": "Start effect at this LED position."},
									   {"label": "len", "documentation": "Number of LEDs to change starting at start."},
									   {"label": "end_brightness", "documentation": "Brightness of all LEDs at the end, default is 0 = OFF."},
									   {"label": "color", "documentation": "Color to set all LEDs to first, default is to use the current color stored in the memory."}
							] }]
	},
	"progress": {
		"prefix": "progress",
		"body": "progress channel, direction, delay, start, len, brightness_on, brightness_off, value",
		"description": "Generates a progress bar effect using change in brightness levels. Progressbar can also be set to fixed percentage value.",
		"reference": "",
		"signatures": [{"label" : "progress channel, direction, delay, start, len, brightness_on, brightness_off, value" , 
						"documentation":"Generates a progress bar effect using change in brightness levels. Progressbar can also be set to fixed percentage value. First use fill command to set the color!", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "direction", "documentation": "Direction where 0% and 100% is, default start led = 0% and start+len=100%."},
									   {"label": "delay", "documentation": "Delay between increments of progress, default 1s, use 0 to render only once with a fixed progress value argument."},
									   {"label": "start", "documentation": "Start effect at this LED position."},
									   {"label": "len", "documentation": "Number of LEDs to change starting at start."},
									   {"label": "brightness_on", "documentation": "Brightness of LEDs that are turned on, default 255."},
									   {"label": "brightness_off", "documentation": "Brightness of LEDs that are turned off, default 0."},
									   {"label": "value", "documentation": "Set progress to this fixed value (delay must be 0, and manual call the render command)."}
							] }]
	},
	"save_state": {
		"prefix": "save_state",
		"body": "save_state channel, filename, start, len",
		"description": "Saves current color and brightness values of a given channel to a CSV file.",
		"reference": "",
		"signatures": [{"label" : "save_state channel, filename, start, len" , 
						"documentation":"Saves current color and brightness values of a given channel to a CSV file.", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "filename", "documentation": "File where to save the data."},
									   {"label": "start", "documentation": "Start saving at LED index (default is LED 0)."},
									   {"label": "len", "documentation": "Save this number of LEDs (default entire string)."}
							] }]
	},
	"load_state": {
		"prefix": "load_state",
		"body": "load_state channel, filename, start, len",
		"description": "Loads saved color and brightness values from a CSV file which was saved with save_state command.",
		"reference": "",
		"signatures": [{"label" : "load_state channel, filename, start, len" , 
						"documentation":"Loads saved color and brightness values from a CSV file which was saved with save_state command.", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "filename", "documentation": "The file where to load values from."},
									   {"label": "start", "documentation": "Start loading at this LED index."},
									   {"label": "len", "documentation": "Load this number of LEDs from the file."}
							] }]
	},
	"thread_start": {
		"prefix": "thread_start",
		"body": "thread_start id, join_type",
		"description": "Starts a new thread, a thread can be used to run commands in the background.",
		"reference": "",
		"signatures": [{"label" : "thread_start id, join_type" , 
						"documentation":"Starts a new thread, a thread can be used to run commands in the background. Must end with thread_stop command.", 
						"parameters": [{"label": "id", "documentation": "Unique number for the thread (1-63, do not use 0), if a thread with the index already exists, join_type will determine how to reinitialize it."},
									   {"label": "join_type", "documentation": "If 0 all command will be aborted on the next call to thread_start, if 1 wait untill all commands have finished."}
							] }]
	},
	"thread_stop": {
		"prefix": "thread_stop",
		"body": "thread_stop",
		"description": "Marks end of code executed in different thread.",
		"reference": "",
		"signatures": [{"label" : "thread_stop" , 
						"documentation":"Marks end of code executed in different thread."}]
	},
	"set_thread_exit_type": {
		"prefix": "set_thread_exit_type",
		"body": "set_thread_exit_type thread_id, join_type",
		"description": "Changes the join_type or how to behave when kill_thread command is executed.",
		"reference": "",
		"signatures": [{"label" : "set_thread_exit_type thread_id, join_type" , 
						"documentation":"Changes the join_type or how to behave when kill_thread command is executed.", 
						"parameters": [{"label": "thread_id", "documentation": "Thread number to change the join type."},
									   {"label": "join_type", "documentation": "Sets the join type: 0 aborts running commands, 1 waits until all commands are completed."}
							] }]
	},
	"wait_thread": {
		"prefix": "wait_thread",
		"body": "wait_thread thread_id",
		"description": "Waits for given thread_id to finish all commands.",
		"reference": "",
		"signatures": [{"label" : "wait_thread thread_id" , 
						"documentation":"Waits for given thread_id to finish all commands.", 
						"parameters": [{"label": "thread_id", "documentation": "Thread number to wait for."}
							] }]
	},
	"kill_thread": {
		"prefix": "kill_thread",
		"body": "kill_thread thread_id, join_type",
		"description": "Terminates the given thread_id.",
		"reference": "",
		"signatures": [{"label" : "kill_thread thread_id, join_type" , 
						"documentation":"Terminates the given thread_id.", 
						"parameters": [{"label": "thread_id", "documentation": "Thread number to terminate."},
									   {"label": "type", "documentation": "The join type, 0 aborts all commands in the thread, 1 wait until all commands completed."}
							] }]
	},
	"wait_signal": {
		"prefix": "wait_signal",
		"body": "wait_signal",
		"description": "Waits for a signal_thread command executed by another thread.",
		"reference": "",
		"signatures": [{"label" : "wait_signal" , 
						"documentation":"Waits for a signal_thread command executed by another thread."
					   }]
	},
	"signal_thread": {
		"prefix": "signal_thread",
		"body": "signal_thread thread_id",
		"description": "Sends a signal to the given thread_id which is waiting with the wait_signal command.",
		"reference": "",
		"signatures": [{"label" : "signal_thread thread_id" , 
						"documentation":"Sends a signal to the given thread_id which is waiting with the wait_signal command.", 
						"parameters": [{"label": "thread_id", "documentation": "Thread id to send signal to."}
							] }]
	},
	"reset": {
		"prefix": "reset",
		"body": "reset",
		"description": "Resets all initialized LED strings, ready for new setup and init commands.",
		"reference": "",
		"signatures": [{"label" : "reset" , 
						"documentation":"Resets all initialized LED strings, ready for new setup and init commands."
					   }]
	},
	"do": {
		"prefix": "do",
		"body": "do",
		"description": "Starts a loop, terminate with loop command.",
		"reference": "",
		"signatures": [{"label" : "do" , 
						"documentation":"Starts a loop, terminate with loop command." }]
	},
	"loop": {
		"prefix": "loop",
		"body": "loop count, step",
		"description": "Ends a loop started with do command.",
		"reference": "",
		"signatures": [{"label" : "loop count, step" , 
						"documentation":"Ends a loop started with do command.",
						"parameters": [{"label": "count", "documentation": "Maximum number of times to execute the loop (default run forever)."},
									   {"label": "step", "documentation": "Increase the loop index by this value for every loop (default 1)."}] }]
	},
	"config_2D": {
		"prefix": "config_2D",
		"body": "config_2D channel, width, height, panel_type, panel_size_x, panel_size_y, start_led, map_file",
		"description": "Configures a channel for use as 2D graphics display.",
		"reference": "",
		"signatures": [{"label" : "config_2D channel, width, height, panel_type, panel_size_x, panel_size_y, start_led, map_file" , 
						"documentation":"Configures a channel for use as 2D graphics display.", 
						"parameters": [{"label": "channel", "documentation": "Channel number to configure."},
									   {"label": "width", "documentation": "Number of LEDs in the x direction."},
									   {"label": "height", "documentation": "Number of LEDs in the y direction."},
									   {"label": "panel_type", "documentation": "If connecting multiple X*Y LED panels this defines how LEDs are connected in each panel."},
									   {"label": "panel_size_x", "documentation": "Size in x direction for each LED panel."},
									   {"label": "panel_size_y", "documentation": "Size in y direction for each LED panel."},
									   {"label": "start_led", "documentation": "2D panel starts at this position in the 1D LED string, default 0."},
									   {"label": "map_file", "documentation": "Optional a map file, containing X,Y vs 1D LED string index."}
							] }]
	},
	"init_layer": {
		"prefix": "init_layer",
		"body": "init_layer channel, layer_nr, render_operation, type, antialiasing, filter_type, x, y",
		"description": "Initializes a new 2D graphics layer or changes layer settings.",
		"reference": "",
		"signatures": [{"label" : "init_layer channel, layer_nr, render_operation, type, antialiasing, filter_type, x, y" , 
						"documentation":"Initializes a new 2D graphics layer or changes layer settings.", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "layer_nr", "documentation": "The layer number."},
									   {"label": "render_operation", "documentation": "Cairo render operator."},
									   {"label": "type", "documentation": "Type reserved for future use, always use 0."},
									   {"label": "antialiasing", "documentation": "Specify the type of cairo antialiasing."},
									   {"label": "filter_type", "documentation": "Cairo filter type."},
									   {"label": "x", "documentation": "x start location of the layer."},
									   {"label": "y", "documentation": "y start location of the layer."}
							] }]
	},
	"change_layer": {
		"prefix": "change_layer",
		"body": "change_layer channel, layer_nr",
		"description": "Changes the current layer 2D cairo graphics will be painted.",
		"reference": "",
		"signatures": [{"label" : "change_layer channel, layer_nr" , 
						"documentation":"Changes the current layer 2D cairo graphics will be painted.", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "layer_nr", "documentation": "The layer number."},
									   {"label": "render_operation", "documentation": "Cairo render operator."},
									   {"label": "type", "documentation": "Type reserved for future use, always use 0."},
									   {"label": "antialiasing", "documentation": "Specify the type of cairo antialiasing."},
									   {"label": "filter_type", "documentation": "Cairo filter type."},
									   {"label": "x", "documentation": "x start location of the layer, integer default 0."},
									   {"label": "y", "documentation": "y start location of the layer, integer default 0."}
							] }]
	},
	"draw_circle": {
		"prefix": "draw_circle",
		"body": "draw_circle channel, x, y, radius, color, border_width, border_color, start_angle, stop_angle, negative",
		"description": "Draws a circle or arc (cairo_arc function) on the current layer.",
		"reference": "",
		"signatures": [{"label" : "channel, x, y, radius, color, border_width, border_color, start_angle, stop_angle, negative", 
						"documentation":"Draws a circle or arc (cairo_arc function) on the current layer.", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "x", "documentation": "x location of the center [double]."},
									   {"label": "y", "documentation": "y location of the center [double]."},
									   {"label": "radius", "documentation": "Radius of the circle [double]."},
									   {"label": "color", "documentation": "Fill color of the circle, leave empty for no fill."},
									   {"label": "border_width", "documentation": "Border size of the cricle [double]."},
									   {"label": "border_color", "documentation": "Color of the circle border."},
									   {"label": "start_angle", "documentation": "Start angle in degrees (0-360, use 0 for full circle) [double]."},
									   {"label": "stop_angle", "documentation": "Stop angle of the circle, use 360 for full circle [double]."},
									   {"label": "negative", "documentation": "Draw negative arc (see cairo_arc_negative function)."}
							] }]
	},
	"cls": {
		"prefix": "cls",
		"body": "cls channel, color",
		"description": "Fills current layer with a color.",
		"reference": "",
		"signatures": [{"label" : "cls channel, color", 
						"documentation":"Fills current layer with a color.", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "color", "documentation": "Color to fill the current layer, default is tranasparent except when the current layer is the bottom layer then black is rendered."}
							] }]
	},
	"draw_image": {
		"prefix": "draw_image",
		"body": "draw_image channel, file_name, dst_x, dst_y, src_x, src_y, dst_width, dst_height, src_width, src_height, speed, max_loops",
		"description": "Draws a JPG, PNG or animated GIF to the current layer.",
		"reference": "",
		"signatures": [{"label" : "draw_image channel, file_name, dst_x, dst_y, src_x, src_y, dst_width, dst_height, src_width, src_height, speed, max_loops", 
						"documentation":"Draws a JPG, PNG or animated GIF to the current layer.", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "file_name", "documentation": "The file name to load picture data from."},
									   {"label": "dst_x", "documentation": "Destination X location (top left corner), integer [double]."},
									   {"label": "dst_y", "documentation": "Destination Y location (top left corner), integer [double]."},
									   {"label": "src_x", "documentation": "Start X location in the image integer (to take a part of image) default 0 [integer]."},
									   {"label": "src_y", "documentation": "Start Y location in the image integer (to take a part of image) default 0 [integer]."},
									   {"label": "dst_width", "documentation": "Destination width, the width of the image on the screen (to shrink/expand), default width of the image [double]."},
									   {"label": "dst_height", "documentation": "Destination height, the height of the image on the screen (to shrink/expand), default height of the image [double]."},
									   {"label": "src_width", "documentation": "Source width in the image, to take a part of the image, default image width [integer]."},
									   {"label": "src_height", "documentation": "Source height in the image, to take a part of the image, default image height [integer]."},
									   {"label": "speed", "documentation": "If the file is an animated gif, specify the speed multiplier, if 2 the GIF speed will be x2 [double]."},
									   {"label": "max_loops", "documentation": "Draw negative arc (see cairo_arc_negative function)."}
							] }]
	},
	"draw_line": {
		"prefix": "draw_line",
		"body": "draw_line channel, x1, y1, x2, y2, width, color",
		"description": "Draws a cairo antialiased line.",
		"reference": "",
		"signatures": [{"label" : "draw_line channel, x1, y1, x2, y2, width, color", 
						"documentation":"Draws a cairo antialiased line.", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "x1", "documentation": "Start X of the line [double]."},
									   {"label": "y1", "documentation": "Start Y of the line [double]."},
									   {"label": "x2", "documentation": "End X of the line [double]."},
									   {"label": "y2", "documentation": "End Y of the line [double]."},
									   {"label": "width", "documentation": "Width in pixels of the line [double]."},
									   {"label": "color", "documentation": "Color of the line."}
							] }]
	},
	"draw_sharp_line": {
		"prefix": "draw_sharp_line",
		"body": "draw_sharp_line channel, x1, y1, x2, y2, width, color",
		"description": "Draws a line using the Bresenham algorithm rather than cairo which will give a sharper line for 1 pixel lines.",
		"reference": "",
		"signatures": [{"label" : "draw_sharp_line channel, x1, y1, x2, y2, width, color", 
						"documentation":"Draws a line using the Bresenham algorithm rather than cairo which will give a sharper line for 1 pixel lines.", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "x1", "documentation": "Start X of the line [integer]."},
									   {"label": "y1", "documentation": "Start Y of the line [integer]."},
									   {"label": "x2", "documentation": "End X of the line [integer]."},
									   {"label": "y2", "documentation": "End Y of the line [integer]."},
									   {"label": "width", "documentation": "Not implemented yet, always use 1."},
									   {"label": "color", "documentation": "Color of the line."}
							] }]
	},
	"draw_rectangle": {
		"prefix": "draw_rectangle",
		"body": "draw_rectangle channel, x, y, width, height, color, border_width, border_color",
		"description": "Draws and fills a rectangle.",
		"reference": "",
		"signatures": [{"label" : "draw_rectangle channel, x, y, width, height, color, border_width, border_color", 
						"documentation":"Draws and fills a rectangle.", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "x", "documentation": "X location of the left top [double]."},
									   {"label": "y", "documentation": "Y location of the left top [double]."},
									   {"label": "width", "documentation": "Width of the rectangle [double]."},
									   {"label": "height", "documentation": "Height of the rectangle [double]."},
									   {"label": "color", "documentation": "Fill color of the rectangle."},
									   {"label": "border_width", "documentation": "Border width (default 1)."},
									   {"label": "border_color", "documentation": "Border color."}
							] }]
	},
	"message_board": {
		"prefix": "message_board",
		"body": "message_board channel, x, y, width, height, direction, text_color, back_color, delay, loops, text, font_size, font_anti_alias, options, font",
		"description": "Makes a scrolling message.",
		"reference": "",
		"signatures": [{"label" : "message_board channel, x, y, width, height, direction, text_color, back_color, delay, loops, text, font_size, font_anti_alias, options, font", 
						"documentation":"Makes a scrolling message.", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "x", "documentation": "X location of the left top [integer]."},
									   {"label": "y", "documentation": "Y location of the left top [integer]."},
									   {"label": "width", "documentation": "Width of the rectangle [integer]."},
									   {"label": "height", "documentation": "Height of the rectangle [integer]."},
									   {"label": "direction", "documentation": "Scrolling direction 0,1,2 or 3."},
									   {"label": "text_color", "documentation": "Color of the text."},
									   {"label": "back_color", "documentation": "Background color (optional, default is transparent to render on what is already painted)."},
									   {"label": "delay", "documentation": "Delay between moving text 1 pixel in ms (default 10 ms)"},
									   {"label": "loops", "documentation": "Number of times to repeat the message, use 0 to loop forever."},
									   {"label": "text", "documentation": "Text to display, use double quotes."},
									   {"label": "font_size", "documentation": "Height of the text in pixels."},
									   {"label": "font_anti_alias", "documentation": "Set antialiasing options, default is 1=CAIRO_ANTIALIAS_NONE."},
									   {"label": "options", "documentation": "Sets options about the font."},
									   {"label": "font", "documentation": "System font name or file name (.ttf) default is monospace."}
							] }]
	},
	"print_text": {
		"prefix": "print_text",
		"body": "print_text channel, x, y, text, color, font_size, font_anti_alias, options, font",
		"description": "Prints text.",
		"reference": "",
		"signatures": [{"label" : "print_text channel, x, y, text, color, font_size, font_anti_alias, options, font", 
						"documentation":"Prints text.", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "x", "documentation": "X location of the left top [integer]."},
									   {"label": "y", "documentation": "Y location of the left top [integer]."},
									   {"label": "text", "documentation": "Text to display, use double quotes"},
									   {"label": "color", "documentation": "Color of the text."},
									   {"label": "font_size", "documentation": "Height of the text in pixels."},
									   {"label": "font_anti_alias", "documentation": "Set antialiasing options, default is 1=CAIRO_ANTIALIAS_NONE."},
									   {"label": "options", "documentation": "Sets options about the font."},
									   {"label": "font", "documentation": "System font name or file name (.ttf) default is monospace."}
							] }]
	},
	"text_input": {
		"prefix": "text_input",
		"body": "text_input channel, x, y, width, height, port_nr, direction, text_color, back_color, delay, font_size, font_anti_alias, options, font",
		"description": "Prints scrolling text which is send to a TCP socket.",
		"reference": "",
		"signatures": [{"label" : "text_input channel, x, y, width, height, port_nr, direction, text_color, back_color, delay, font_size, font_anti_alias, options, font", 
						"documentation":"Prints scrolling text which is send to a TCP socket.", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "x", "documentation": "X location of the left top [integer]."},
									   {"label": "y", "documentation": "Y location of the left top [integer]."},
									   {"label": "width", "documentation": "Width of the rectangle [integer]."},
									   {"label": "height", "documentation": "Height of the rectangle [integer]."},
									   {"label": "port_nr", "documentation": "TCP port number to listen for incoming text."},
									   {"label": "direction", "documentation": "Scrolling direction 0 or 1."},
									   {"label": "text_color", "documentation": "Color of the text."},
									   {"label": "back_color", "documentation": "Background color (optional, default is transparent to render on what is already painted)."},
									   {"label": "delay", "documentation": "Delay between moving text 1 pixel in ms (default 10 ms)"},
									   {"label": "font_size", "documentation": "Height of the text in pixels."},
									   {"label": "font_anti_alias", "documentation": "Set antialiasing options, default is 1=CAIRO_ANTIALIAS_NONE."},
									   {"label": "options", "documentation": "Sets options about the font."},
									   {"label": "font", "documentation": "System font name or file name (.ttf) default is monospace."}
							] }]
	},
	"set_pixel_color": {
		"prefix": "set_pixel_color",
		"body": "set_pixel_color channel, x, y, z, color",
		"description": "Sets a pixel to given color.",
		"reference": "",
		"signatures": [{"label" : "set_pixel_color channel, x, y, z, color", 
						"documentation":"Sets a pixel to a given color.", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "x", "documentation": "X location of the pixel [integer]."},
									   {"label": "y", "documentation": "Y location of the pixel [integer]."},
									   {"label": "z", "documentation": "Z location of the pixel, for future use [integer]."},
									   {"label": "color", "documentation": "Color of the pixel."}
							] }]
	},
	"record_audio": {
		"prefix": "record_audio",
		"body": "record_audio device, sample_rate, sample_count, channels",
		"description": "Starts recording audio, for audio effects.",
		"reference": "",
		"signatures": [{"label" : "record_audio device, sample_rate, sample_count, channels", 
						"documentation":"Starts recording audio, for audio effects.", 
						"parameters": [{"label": "device", "documentation": "plughw audio device, udp://port_nr, udpb://port_nr or pipe://."},
									   {"label": "sample_rate", "documentation": "Number of samples per second, default 24000."},
									   {"label": "sample_count", "documentation": "Number of samples used in DSP buffer, default 1024."},
									   {"label": "channels", "documentation": "Number of channels to record on, default is 2=stereo."}
							] }]
	},
	"light_organ": {
		"prefix": "light_organ",
		"body": "light_organ channel, color_mode, colors, color_change_delay, duration, delay, start, len",
		"description": "Generates a light organ, makes all LEDs in the strip blink on music rhythm.",
		"reference": "",
		"signatures": [{"label" : "light_organ channel, color_mode, colors, color_change_delay, duration, delay, start, len", 
						"documentation":"Generates a light organ, makes all LEDs in the strip blink on music rhythm.", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "color_mode", "documentation": "How to change colors, 0=fixed, 1=sequence, 2=random, default 2."},
									   {"label": "colors", "documentation": "Color of the light organ, can be multiple colors concatenated for color sequence."},
									   {"label": "color_change_delay", "documentation": "Number of seconds to wait before changing the color."},
									   {"label": "duration", "documentation": "Number of seconds before automatic exit of the command, 0 to run forever."},
									   {"label": "delay", "documentation": "Delay between rendering of the strip. Default is 25ms increase to make flashing slower."},
									   {"label": "start", "documentation": "Start at this LED number."},
									   {"label": "len", "documentation": "Effect for this number of LEDs starting at start."}
							] }]
	},
	"pulses": {
		"prefix": "pulses",
		"body": "pulses channel, threshold, color_mode, colors, delay, color_change_delay, direction, duration, min_brightness, start, len",
		"description": "Generates wave pattern on the LED strip based on intensity of the music.",
		"reference": "",
		"signatures": [{"label" : "pulses channel, threshold, color_mode, colors, delay, color_change_delay, direction, duration, min_brightness, start, len", 
						"documentation":"Generates wave pattern on the LED strip based on intensity of the music", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "color_mode", "documentation": "How to change colors, 0=fixed, 1=sequence, 2=random, default 2."},
									   {"label": "colors", "documentation": "Color of the light organ, can be multiple colors concatenated for color sequence."},
									   {"label": "delay", "documentation": "Delay between rendering of the strip, default 25ms. Decrease to make wave go faster but increase CPU load."},
									   {"label": "color_change_delay", "documentation": "Number of seconds to wait before changing the color."},
									   {"label": "direction", "documentation": "Make wave go right or left (0 or 1)."},
									   {"label": "duration", "documentation": "Number of seconds before automatic exit of the command, 0 to run forever."},
									   {"label": "min_brightness", "documentation": "Minimum level of brightness or audio level that must be reached to turn LEDs on (default 10, max 255)."},
									   {"label": "start", "documentation": "Start at this LED number."},
									   {"label": "len", "documentation": "Effect for this number of LEDs starting at start."}
							] }]
	},
	"vu_meter": {
		"prefix": "vu_meter",
		"body": "vu_meter channel, color_mode, colors, color_change_delay, duration, delay, brightness, start, len",
		"description": "Generates a volume level meter.",
		"reference": "",
		"signatures": [{"label" : "vu_meter channel, color_mode, colors, color_change_delay, duration, delay, brightness, start, len", 
						"documentation":"Generates a volume level meter", 
						"parameters": [{"label": "channel", "documentation": "Channel number."},
									   {"label": "color_mode", "documentation": "How to change colors, 0=fixed, 1=sequence, 2=random, 4=classic VU meter, default 4."},
									   {"label": "colors", "documentation": "Color of the light organ, can be multiple colors concatenated for color sequence."},
									   {"label": "color_change_delay", "documentation": "Number of seconds to wait before changing the color."},
									   {"label": "duration", "documentation": "Number of seconds before automatic exit of the command, 0 to run forever."},
									   {"label": "delay", "documentation": "Delay between rendering of the strip, default 25ms. Decrease to make wave go faster but increase CPU load."},
									   {"label": "brightness", "documentation": "Brightness level of turned on LEDs (0-255) default is 255."},
									   {"label": "start", "documentation": "Start at this LED number."},
									   {"label": "len", "documentation": "Effect for this number of LEDs starting at start."}
							] }]
	}
}